//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoleService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Role", Namespace="http://schemas.datacontract.org/2004/07/DeliveryServiceLibrary.Models")]
    public partial class Role : object
    {
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Permission", Namespace="http://schemas.datacontract.org/2004/07/DeliveryServiceLibrary.Models")]
    public partial class Permission : object
    {
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RoleService.IRoleService")]
    public interface IRoleService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/Get", ReplyAction="http://tempuri.org/IRoleService/GetResponse")]
        System.Threading.Tasks.Task<RoleService.Role[]> GetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/Add", ReplyAction="http://tempuri.org/IRoleService/AddResponse")]
        System.Threading.Tasks.Task<bool> AddAsync(RoleService.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/Remove", ReplyAction="http://tempuri.org/IRoleService/RemoveResponse")]
        System.Threading.Tasks.Task RemoveAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/Edit", ReplyAction="http://tempuri.org/IRoleService/EditResponse")]
        System.Threading.Tasks.Task EditAsync(RoleService.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/AddPermission", ReplyAction="http://tempuri.org/IRoleService/AddPermissionResponse")]
        System.Threading.Tasks.Task AddPermissionAsync(int roleId, RoleService.Permission permission);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetPermissions", ReplyAction="http://tempuri.org/IRoleService/GetPermissionsResponse")]
        System.Threading.Tasks.Task<RoleService.Permission[]> GetPermissionsAsync(int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/RemovePermission", ReplyAction="http://tempuri.org/IRoleService/RemovePermissionResponse")]
        System.Threading.Tasks.Task RemovePermissionAsync(int roleId, RoleService.Permission permission);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface IRoleServiceChannel : RoleService.IRoleService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class RoleServiceClient : System.ServiceModel.ClientBase<RoleService.IRoleService>, RoleService.IRoleService
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RoleServiceClient() : 
                base(RoleServiceClient.GetDefaultBinding(), RoleServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IRoleService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RoleServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(RoleServiceClient.GetBindingForEndpoint(endpointConfiguration), RoleServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RoleServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RoleServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RoleServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RoleServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RoleServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<RoleService.Role[]> GetAsync()
        {
            return base.Channel.GetAsync();
        }
        
        public System.Threading.Tasks.Task<bool> AddAsync(RoleService.Role role)
        {
            return base.Channel.AddAsync(role);
        }
        
        public System.Threading.Tasks.Task RemoveAsync(int id)
        {
            return base.Channel.RemoveAsync(id);
        }
        
        public System.Threading.Tasks.Task EditAsync(RoleService.Role role)
        {
            return base.Channel.EditAsync(role);
        }
        
        public System.Threading.Tasks.Task AddPermissionAsync(int roleId, RoleService.Permission permission)
        {
            return base.Channel.AddPermissionAsync(roleId, permission);
        }
        
        public System.Threading.Tasks.Task<RoleService.Permission[]> GetPermissionsAsync(int roleId)
        {
            return base.Channel.GetPermissionsAsync(roleId);
        }
        
        public System.Threading.Tasks.Task RemovePermissionAsync(int roleId, RoleService.Permission permission)
        {
            return base.Channel.RemovePermissionAsync(roleId, permission);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRoleService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRoleService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8080/RoleService/DeliveryServiceLibrary.RoleService");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return RoleServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IRoleService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return RoleServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IRoleService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IRoleService,
        }
    }
}
