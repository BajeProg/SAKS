//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeliveryService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Delivery", Namespace="http://schemas.datacontract.org/2004/07/DeliveryServiceLibrary.Models")]
    public partial class Delivery : object
    {
        
        private int CourierIdField;
        
        private System.DateTime DateField;
        
        private int IdField;
        
        private int OrderIdField;
        
        private string StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CourierId
        {
            get
            {
                return this.CourierIdField;
            }
            set
            {
                this.CourierIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderId
        {
            get
            {
                return this.OrderIdField;
            }
            set
            {
                this.OrderIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDeliveryService")]
    public interface IDeliveryService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/Get", ReplyAction="http://tempuri.org/IDeliveryService/GetResponse")]
        System.Threading.Tasks.Task<DeliveryService.Delivery[]> GetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/Add", ReplyAction="http://tempuri.org/IDeliveryService/AddResponse")]
        System.Threading.Tasks.Task<bool> AddAsync(DeliveryService.Delivery delivery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/Remove", ReplyAction="http://tempuri.org/IDeliveryService/RemoveResponse")]
        System.Threading.Tasks.Task RemoveAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/Edit", ReplyAction="http://tempuri.org/IDeliveryService/EditResponse")]
        System.Threading.Tasks.Task EditAsync(DeliveryService.Delivery delivery);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface IDeliveryServiceChannel : DeliveryService.IDeliveryService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class DeliveryServiceClient : System.ServiceModel.ClientBase<DeliveryService.IDeliveryService>, DeliveryService.IDeliveryService
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DeliveryServiceClient() : 
                base(DeliveryServiceClient.GetDefaultBinding(), DeliveryServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IDeliveryService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DeliveryServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(DeliveryServiceClient.GetBindingForEndpoint(endpointConfiguration), DeliveryServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DeliveryServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DeliveryServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DeliveryServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DeliveryServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DeliveryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<DeliveryService.Delivery[]> GetAsync()
        {
            return base.Channel.GetAsync();
        }
        
        public System.Threading.Tasks.Task<bool> AddAsync(DeliveryService.Delivery delivery)
        {
            return base.Channel.AddAsync(delivery);
        }
        
        public System.Threading.Tasks.Task RemoveAsync(int id)
        {
            return base.Channel.RemoveAsync(id);
        }
        
        public System.Threading.Tasks.Task EditAsync(DeliveryService.Delivery delivery)
        {
            return base.Channel.EditAsync(delivery);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDeliveryService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDeliveryService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8080/DeliveryService/DeliveryServiceLibrary.DeliveryService");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return DeliveryServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IDeliveryService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return DeliveryServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IDeliveryService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IDeliveryService,
        }
    }
}
